<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>نظام حساب الأرباح (نسخة احترافية)</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Cairo:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Cairo', sans-serif; transition: opacity 0.5s ease-in-out; background-color: #f1f5f9; }
        .positive { color: #22c55e; }
        .negative { color: #ef4444; }
        .toast {
            visibility: hidden; min-width: 250px; background-color: #333; color: #fff; text-align: center;
            border-radius: 8px; padding: 16px; position: fixed; z-index: 50; left: 50%;
            transform: translateX(-50%); bottom: 30px; opacity: 0;
            transition: opacity 0.5s, visibility 0.5s;
        }
        .toast.show { visibility: visible; opacity: 1; }
        #loader {
            border: 8px solid #f3f3f3; border-top: 8px solid #3b82f6; border-radius: 50%;
            width: 60px; height: 60px; animation: spin 1s linear infinite;
            position: absolute; top: 40%; left: 50%; margin-left: -30px; margin-top: -30px;
        }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        .card { background-color: white; border-radius: 0.75rem; box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1); padding: 1.5rem; transition: box-shadow 0.3s ease-in-out; }
        .card:hover { box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1); }
        .card-header { font-size: 1.5rem; font-weight: 700; margin-bottom: 1rem; border-bottom: 1px solid #e5e7eb; padding-bottom: 0.75rem; display: flex; align-items: center; gap: 0.5rem;}
        .nav-btn { padding: 0.5rem 1rem; border-radius: 0.5rem; font-weight: 600; transition: all 0.2s; }
        .nav-btn.active { background-color: #3b82f6; color: white; box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1); }
        .nav-btn:not(.active) { background-color: #e2e8f0; color: #475569; }
    </style>
</head>
<body class="bg-slate-100">

    <div id="loader" class="hidden"></div>
    <div id="toast" class="toast"></div>
    
    <!-- Auth Container -->
    <div id="auth-container" class="min-h-screen flex items-center justify-center p-4">
        <div class="w-full max-w-md bg-white p-8 rounded-xl shadow-lg">
            <div id="login-form">
                <h2 class="text-3xl font-bold text-center mb-6 text-gray-800">تسجيل الدخول</h2>
                <div id="login-error" class="text-red-500 text-center mb-4 hidden"></div>
                <input type="email" id="login-email" class="w-full p-3 mb-4 bg-gray-50 border rounded-lg" placeholder="البريد الإلكتروني" required>
                <input type="password" id="login-password" class="w-full p-3 mb-4 bg-gray-50 border rounded-lg" placeholder="كلمة المرور" required>
                <button id="login-btn" class="w-full bg-blue-600 text-white font-bold py-3 rounded-lg hover:bg-blue-700 transition-colors">دخول</button>
                <p class="text-center mt-4">ليس لديك حساب؟ <a href="#" id="show-signup" class="text-blue-600 hover:underline">أنشئ حساباً جديداً</a></p>
            </div>
            <div id="signup-form" class="hidden">
                <h2 class="text-3xl font-bold text-center mb-6 text-gray-800">إنشاء حساب جديد</h2>
                 <div id="signup-error" class="text-red-500 text-center mb-4 hidden"></div>
                <input type="email" id="signup-email" class="w-full p-3 mb-4 bg-gray-50 border rounded-lg" placeholder="البريد الإلكتروني" required>
                <input type="password" id="signup-password" class="w-full p-3 mb-4 bg-gray-50 border rounded-lg" placeholder="كلمة المرور (6 أحرف على الأقل)" required>
                <button id="signup-btn" class="w-full bg-green-600 text-white font-bold py-3 rounded-lg hover:bg-green-700 transition-colors">إنشاء حساب</button>
                <p class="text-center mt-4">لديك حساب بالفعل؟ <a href="#" id="show-login" class="text-blue-600 hover:underline">سجل الدخول</a></p>
            </div>
        </div>
    </div>

    <!-- App Content -->
    <div id="app-content" class="container mx-auto p-4 sm:p-6 lg:p-8 hidden">
        <header class="text-center mb-6">
             <div class="flex justify-between items-center">
                <button id="logout-btn" class="text-sm bg-red-500 text-white py-2 px-4 rounded-lg hover:bg-red-600">تسجيل الخروج</button>
                <h1 class="text-3xl sm:text-4xl font-bold text-slate-800">Tektronix</h1>
                <div class="w-24"></div> <!-- Spacer -->
            </div>
            <p id="user-email" class="text-slate-600 mt-2"></p>
        </header>

        <!-- Navigation -->
        <div class="flex justify-center gap-2 mb-8">
            <button id="sales-panel-btn" class="nav-btn active">لوحة المبيعات</button>
            <button id="admin-panel-btn" class="nav-btn">لوحة التحكم</button>
        </div>

        <!-- Sales Panel -->
        <div id="sales-panel">
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                <div class="lg:col-span-2 space-y-6">
                     <!-- Sales -->
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div class="card">
                            <h2 class="card-header">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-blue-500"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="16"></line><line x1="8" y1="12" x2="16" y2="12"></line></svg>
                                بيع بالسعر الافتراضي
                            </h2>
                            <div class="flex items-end gap-2">
                                <div class="flex-grow"><input type="number" id="newSaleQty" class="w-full p-3 bg-slate-50 border rounded-lg" placeholder="الكمية"></div>
                                <button id="recordSaleBtn" class="bg-blue-600 text-white font-bold py-3 px-6 rounded-lg hover:bg-blue-700">بيع</button>
                            </div>
                        </div>
                        <div class="card">
                            <h2 class="card-header">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-green-500"><path d="M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"></path><line x1="7" y1="7" x2="7.01" y2="7"></line></svg>
                                بيع بسعر خاص
                            </h2>
                            <div class="flex items-end gap-2">
                                 <div class="flex-grow"><input type="number" id="specialSalePrice" class="w-full p-3 bg-slate-50 border rounded-lg" placeholder="السعر"></div>
                                <div class="flex-grow"><input type="number" id="specialSaleQty" class="w-full p-3 bg-slate-50 border rounded-lg" placeholder="الكمية"></div>
                                <button id="recordSpecialSaleBtn" class="bg-green-600 text-white font-bold py-3 px-6 rounded-lg hover:bg-green-700">بيع</button>
                            </div>
                        </div>
                    </div>
                    <!-- Expenses -->
                    <div class="card">
                        <h2 class="card-header">
                             <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-orange-500"><path d="M21.5 12H16c-.7 2-2 3-4 3s-3.3-1-4-3H2.5"></path><path d="M5.5 5.1L2 12v6c0 1.1.9 2 2 2h16a2 2 0 0 0 2-2v-6l-3.4-6.9A2 2 0 0 0 16.8 4H7.2a2 2 0 0 0-1.7 1.1z"></path></svg>
                            إضافة المصاريف
                        </h2>
                        <div class="space-y-3">
                            <div class="grid grid-cols-1 md:grid-cols-3 gap-2">
                                <input type="number" id="newMarketingExpense" class="md:col-span-1 p-2 bg-slate-50 border rounded-lg" placeholder="مبلغ التسويق">
                                <input type="text" id="newMarketingExpenseNote" class="md:col-span-1 p-2 bg-slate-50 border rounded-lg" placeholder="ملاحظة">
                                <button id="addMarketingExpenseBtn" class="md:col-span-1 bg-orange-500 text-white font-bold p-2 rounded-lg hover:bg-orange-600">إضافة تسويق</button>
                            </div>
                             <div class="grid grid-cols-1 md:grid-cols-3 gap-2">
                                <input type="number" id="newToolsExpense" class="md:col-span-1 p-2 bg-slate-50 border rounded-lg" placeholder="مبلغ الأدوات">
                                <input type="text" id="newToolsExpenseNote" class="md:col-span-1 p-2 bg-slate-50 border rounded-lg" placeholder="ملاحظة">
                                <button id="addToolsExpenseBtn" class="md:col-span-1 bg-orange-500 text-white font-bold p-2 rounded-lg hover:bg-orange-600">إضافة أدوات</button>
                            </div>
                             <div class="grid grid-cols-1 md:grid-cols-3 gap-2">
                                <input type="number" id="newOtherExpense" class="md:col-span-1 p-2 bg-slate-50 border rounded-lg" placeholder="مبلغ آخر">
                                <input type="text" id="newOtherExpenseNote" class="md:col-span-1 p-2 bg-slate-50 border rounded-lg" placeholder="ملاحظة">
                                <button id="addOtherExpenseBtn" class="md:col-span-1 bg-orange-500 text-white font-bold p-2 rounded-lg hover:bg-orange-600">إضافة أخرى</button>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Results Column -->
                <div class="space-y-6">
                    <div class="card bg-blue-600 text-white text-center">
                        <h2 class="text-2xl font-bold mb-2">صافي الربح النهائي</h2>
                        <h3 id="netProfit" class="text-5xl font-extrabold my-4">$0.00</h3>
                    </div>
                    <div class="card">
                        <h2 class="card-header">ملخص الأرباح والمبيعات</h2>
                        <div class="space-y-3">
                            <div class="flex justify-between items-center bg-slate-50 p-3 rounded-lg"><span class="font-medium">متوسط الربح للقطعة</span><h3 id="profitPerItem" class="text-lg font-bold">$0.00</h3></div>
                            <div class="flex justify-between items-center bg-slate-50 p-3 rounded-lg"><span class="font-medium">إجمالي القطع المباعة</span><h3 id="totalSoldStock" class="text-lg font-bold">0</h3></div>
                            <div class="flex justify-between items-center bg-slate-50 p-3 rounded-lg"><span class="font-medium">إجمالي الربح الأولي</span><h3 id="totalInitialProfit" class="text-lg font-bold positive">$0.00</h3></div>
                            <div class="flex justify-between items-center bg-slate-50 p-3 rounded-lg"><span class="font-medium">إجمالي المصاريف</span><h3 id="totalExpenses" class="text-lg font-bold negative">$0.00</h3></div>
                        </div>
                    </div>
                     <div class="card">
                         <h2 class="card-header">سجل المبيعات</h2>
                         <div id="salesHistoryList" class="space-y-2 max-h-48 overflow-y-auto"></div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Admin Panel -->
        <div id="admin-panel" class="hidden">
             <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                <div class="lg:col-span-2 space-y-6">
                    <div class="card">
                        <h2 class="card-header">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-blue-500"><path d="M12 2a10 10 0 1 0 10 10" /><path d="M12 18a10 10 0 0 0 10-10" /><path d="M12 2v10" /></svg>
                            تسعير المنتج
                        </h2>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label for="adminCostPrice" class="block text-sm font-medium text-slate-600 mb-1">سعر التكلفة الأساسي ($)</label>
                                <input type="number" id="adminCostPrice" class="w-full p-3 bg-slate-50 border rounded-lg" placeholder="0">
                            </div>
                            <div class="grid grid-cols-2 gap-2">
                                 <div>
                                    <label for="adminSellPrice" class="block text-sm font-medium text-slate-600 mb-1">سعر البيع الافتراضي ($)</label>
                                    <input type="number" id="adminSellPrice" class="w-full p-3 bg-slate-50 border rounded-lg" placeholder="0">
                                 </div>
                                 <div class="relative">
                                    <label for="adminDiscountPercentage" class="block text-sm font-medium text-slate-600 mb-1">خصم افتراضي</label>
                                    <input type="number" id="adminDiscountPercentage" class="w-full p-3 bg-slate-50 border rounded-lg pr-8" placeholder="0">
                                    <span class="absolute left-2 top-1/2 mt-3 -translate-y-1/2 text-slate-500">%</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card">
                         <h2 class="card-header">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-indigo-500"><path d="M12 20.94c1.5 0 2.85-1.22 3-2.77.15-1.55-1.29-2.9-3-2.9s-3.15 1.35-3 2.9c.15 1.55 1.5 2.77 3 2.77z"></path><path d="M12 3v11"></path><path d="M18.4 6.6a9 9 0 1 1-12.79 0"></path></svg>
                            إضافة تكلفة مؤقتة (هدية)
                         </h2>
                         <div class="grid grid-cols-1 md:grid-cols-3 gap-2">
                             <input type="number" id="additionalCost" class="p-3 bg-slate-50 border rounded-lg" placeholder="التكلفة الإضافية للقطعة">
                             <input type="number" id="additionalCostQty" class="p-3 bg-slate-50 border rounded-lg" placeholder="لعدد قطع">
                             <button id="addTempCostBtn" class="bg-indigo-600 text-white font-bold py-3 px-6 rounded-lg hover:bg-indigo-700">إضافة تكلفة</button>
                         </div>
                         <div id="costAdjustmentsLog" class="mt-4 space-y-2 max-h-40 overflow-y-auto"></div>
                    </div>
                    <div class="card">
                        <h2 class="card-header">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-purple-500"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><line x1="10" y1="9" x2="8" y2="9"></line></svg>
                            إدارة المخزون
                        </h2>
                        <div class="text-center mb-4">
                            <label class="block text-sm font-medium text-slate-600">المخزون المتوفر حالياً</label>
                            <div id="adminAvailableStockDisplay" class="text-4xl font-bold text-slate-800">0</div>
                        </div>
                        <div class="flex items-end gap-2">
                            <div class="flex-grow"><input type="number" id="stockAdjustment" class="w-full p-3 bg-slate-50 border rounded-lg" placeholder="الكمية"></div>
                            <button id="addStockBtn" class="bg-green-500 text-white font-bold p-3 rounded-lg hover:bg-green-600" title="إضافة للمخزون"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg></button>
                            <button id="removeStockBtn" class="bg-red-500 text-white font-bold p-3 rounded-lg hover:bg-red-600" title="إزالة من المخزون"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="5" y1="12" x2="19" y2="12"></line></svg></button>
                        </div>
                        <div id="low-stock-warning-admin" class="hidden mt-4 p-3 bg-yellow-100 text-yellow-800 border-r-4 border-yellow-500 rounded-lg"></div>
                    </div>
                </div>
                <div class="space-y-6">
                    <div class="card">
                        <h2 class="card-header">تحليل المخزون</h2>
                        <div class="space-y-3">
                            <div class="p-3 rounded-lg bg-slate-100 border-l-4 border-slate-400">
                                <span class="font-medium text-sm text-slate-600">قيمة إجمالي المخزون (بالتكلفة)</span>
                                <h3 id="totalStockValueCost" class="text-lg font-bold text-slate-800">$0.00</h3>
                            </div>
                             <div class="p-3 rounded-lg bg-slate-100 border-l-4 border-slate-400">
                                <span class="font-medium text-sm text-slate-600">قيمة إجمالي المخزون (بالبيع)</span>
                                <h3 id="totalStockValueSale" class="text-lg font-bold text-slate-800">$0.00</h3>
                            </div>
                             <hr/>
                            <div class="flex justify-between items-center bg-slate-50 p-3 rounded-lg"><span class="font-medium">قيمة المخزون الحالي (بالتكلفة)</span><h3 id="currentStockValueCost" class="text-lg font-bold">$0.00</h3></div>
                            <div class="flex justify-between items-center bg-slate-50 p-3 rounded-lg"><span class="font-medium">قيمة المخزون الحالي (بالبيع)</span><h3 id="currentStockValueSale" class="text-lg font-bold">$0.00</h3></div>
                            <div class="flex justify-between items-center bg-slate-50 p-3 rounded-lg"><span class="font-medium">الربح المحتمل من المخزون</span><h3 id="potentialProfit" class="text-lg font-bold positive">$0.00</h3></div>
                        </div>
                    </div>
                     <div class="card">
                         <h2 class="card-header">سجل المصاريف</h2>
                         <div id="expensesLog" class="space-y-2 max-h-96 overflow-y-auto"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script type="module">
        // --- Firebase SDK Imports ---
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, setDoc, onSnapshot, updateDoc, arrayUnion, arrayRemove } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // --- DOM Elements ---
        const loader = document.getElementById('loader');
        const authContainer = document.getElementById('auth-container');
        const appContent = document.getElementById('app-content');
        const loginForm = document.getElementById('login-form');
        const signupForm = document.getElementById('signup-form');
        const showSignup = document.getElementById('show-signup');
        const showLogin = document.getElementById('show-login');
        const userEmailEl = document.getElementById('user-email');
        const logoutBtn = document.getElementById('logout-btn');
        const salesPanelBtn = document.getElementById('sales-panel-btn');
        const adminPanelBtn = document.getElementById('admin-panel-btn');
        const salesPanel = document.getElementById('sales-panel');
        const adminPanel = document.getElementById('admin-panel');

        const elements = {};
        const allInputIds = ['newSaleQty', 'specialSalePrice', 'specialSaleQty', 'newMarketingExpense', 'newMarketingExpenseNote', 'newToolsExpense', 'newToolsExpenseNote', 'newOtherExpense', 'newOtherExpenseNote', 'adminCostPrice', 'adminSellPrice', 'adminDiscountPercentage', 'additionalCost', 'additionalCostQty', 'stockAdjustment'];
        allInputIds.forEach(id => elements[id] = document.getElementById(id));
        
        const availableStockDisplays = [document.getElementById('adminAvailableStockDisplay')];
        const lowStockWarningAdmin = document.getElementById('low-stock-warning-admin');
        const profitPerItemEl = document.getElementById('profitPerItem');
        const totalSoldStockEl = document.getElementById('totalSoldStock');
        const totalInitialProfitEl = document.getElementById('totalInitialProfit');
        const totalExpensesEl = document.getElementById('totalExpenses');
        const netProfitEl = document.getElementById('netProfit');
        const totalStockValueCostEl = document.getElementById('totalStockValueCost');
        const totalStockValueSaleEl = document.getElementById('totalStockValueSale');
        const currentStockValueCostEl = document.getElementById('currentStockValueCost');
        const currentStockValueSaleEl = document.getElementById('currentStockValueSale');
        const potentialProfitEl = document.getElementById('potentialProfit');
        const salesHistoryListEl = document.getElementById('salesHistoryList');
        const expensesLogEl = document.getElementById('expensesLog');
        const costAdjustmentsLogEl = document.getElementById('costAdjustmentsLog');
        const toastEl = document.getElementById('toast');
        
        // --- State ---
        let db, auth, dataRef, localData = {}, unsubscribe;

        // --- Firebase Initialization ---
        async function initializeFirebase() {
            loader.classList.remove('hidden');
            const firebaseConfig = {
  apiKey: "AIzaSyCJIoPt0J0UocGGVdiQSnxicHv9UL0G49g",
  authDomain: "my-profit-app-28526.firebaseapp.com",
  projectId: "my-profit-app-28526",
  storageBucket: "my-profit-app-28526.firebasestorage.app",
  messagingSenderId: "89143914718",
  appId: "1:89143914718:web:2aa11dee0399c15bdd524f"
};

            try {
                if (firebaseConfig.apiKey === "YOUR_API_KEY") {
                    throw new Error("Firebase config is not set.");
                }
                const app = initializeApp(firebaseConfig);
                db = getFirestore(app);
                auth = getAuth(app);
                handleAuthState();
            } catch (error) {
                console.error("Firebase Init Error:", error);
                loader.classList.add('hidden');
                authContainer.classList.remove('hidden');
                authContainer.innerHTML = `<div class="w-full max-w-lg bg-white p-8 rounded-xl shadow-lg text-center"><h2 class="text-3xl font-bold text-red-600 mb-4">خطأ في الإعداد</h2><p class="text-slate-700 mb-2">يبدو أنك لم تقم بإضافة إعدادات Firebase الخاصة بك إلى الكود.</p><p class="text-slate-600 mb-6">الرجاء اتباع "دليل الإعداد" ونسخ كائن <code class="bg-slate-200 p-1 rounded">firebaseConfig</code> الخاص بك، ثم لصقه في المكان المخصص داخل الكود.</p></div>`;
            }
        }

        function handleAuthState() {
            onAuthStateChanged(auth, user => {
                if (unsubscribe) unsubscribe();
                if (user) {
                    authContainer.classList.add('hidden');
                    appContent.classList.remove('hidden');
                    userEmailEl.textContent = `مرحباً بك، `;
                    setupFirestoreListener(user.uid);
                } else {
                    authContainer.classList.remove('hidden');
                    appContent.classList.add('hidden');
                    loader.classList.add('hidden');
                }
            });
        }

        function setupFirestoreListener(userId) {
            dataRef = doc(db, `users/${userId}/data/main`);
            unsubscribe = onSnapshot(dataRef, (docSnap) => {
                localData = docSnap.exists() ? docSnap.data() : getInitialData();
                if (!docSnap.exists()) setDoc(dataRef, localData);
                updateUI();
                appContent.classList.remove('hidden');
                document.body.classList.add('opacity-100');
                loader.classList.add('hidden');
            }, (error) => {
                console.error("Firestore listener error:", error);
                showToast("خطأ في الاتصال بقاعدة البيانات.", true);
                loader.classList.add('hidden');
            });
        }
        
        function getInitialData() {
            return {
                costPrice: 0, sellPrice: 0, availableStock: 0, discountPercentage: 0,
                marketingExpenses: [], toolsExpenses: [], otherExpenses: [],
                salesHistory: [], costAdjustments: []
            };
        }

        const formatCurrency = (value) => `$${(value || 0).toFixed(2)}`;

        function updateUI() {
            if (!localData) return;
            // Populate inputs
            if (elements.adminCostPrice) elements.adminCostPrice.value = localData.costPrice || 0;
            if (elements.adminSellPrice) elements.adminSellPrice.value = localData.sellPrice || 0;
            if (elements.adminDiscountPercentage) elements.adminDiscountPercentage.value = localData.discountPercentage || 0;
            availableStockDisplays.forEach(el => { if(el) el.textContent = localData.availableStock || 0 });
            
            const showWarning = localData.availableStock > 0 && localData.availableStock <= 3;
            if(lowStockWarningAdmin) {
                lowStockWarningAdmin.textContent = `تنبيه: تبقى ${localData.availableStock} قطعة فقط في المخزون!`;
                lowStockWarningAdmin.classList.toggle('hidden', !showWarning);
            }

            // Calculations
            const { costPrice, sellPrice, salesHistory, marketingExpenses, toolsExpenses, otherExpenses, discountPercentage, availableStock, costAdjustments } = localData;
            const totalSoldStock = Array.isArray(salesHistory) ? salesHistory.reduce((sum, sale) => sum + (sale.quantity || 0), 0) : 0;
            const totalStockEver = (availableStock || 0) + totalSoldStock;
            
            const totalInitialProfit = Array.isArray(salesHistory) ? salesHistory.reduce((sum, sale) => sum + ((sale.salePrice - sale.costPriceAtTimeOfSale) * sale.quantity), 0) : 0;
            const avgProfitPerItem = totalSoldStock > 0 ? totalInitialProfit / totalSoldStock : 0;
            
            const totalMarketing = Array.isArray(marketingExpenses) ? marketingExpenses.reduce((sum, item) => sum + item.amount, 0) : 0;
            const totalTools = Array.isArray(toolsExpenses) ? toolsExpenses.reduce((sum, item) => sum + item.amount, 0) : 0;
            const totalOther = Array.isArray(otherExpenses) ? otherExpenses.reduce((sum, item) => sum + item.amount, 0) : 0;
            const totalExpenses = totalMarketing + totalTools + totalOther;

            const netProfit = totalInitialProfit - totalExpenses;
            const finalDefaultSellPrice = (sellPrice || 0) * (1 - (discountPercentage || 0) / 100);
            
            const totalStockValueAtCost = totalStockEver * (costPrice || 0);
            const totalStockValueAtSale = totalStockEver * finalDefaultSellPrice;
            const currentStockValueAtCost = (availableStock || 0) * (costPrice || 0) + (Array.isArray(costAdjustments) ? costAdjustments.reduce((sum, adj) => sum + (adj.cost * adj.remaining), 0) : 0);
            const currentStockValueAtSale = (availableStock || 0) * finalDefaultSellPrice;
            const potentialStockProfit = currentStockValueAtSale - currentStockValueAtCost;

            // Update displays
            if (profitPerItemEl) profitPerItemEl.textContent = formatCurrency(avgProfitPerItem);
            if (totalSoldStockEl) totalSoldStockEl.textContent = totalSoldStock;
            if (totalInitialProfitEl) totalInitialProfitEl.textContent = formatCurrency(totalInitialProfit);
            if (totalExpensesEl) totalExpensesEl.textContent = formatCurrency(totalExpenses);
            if (netProfitEl) netProfitEl.textContent = formatCurrency(netProfit);
            if (totalStockValueCostEl) totalStockValueCostEl.textContent = formatCurrency(totalStockValueAtCost);
            if (totalStockValueSaleEl) totalStockValueSaleEl.textContent = formatCurrency(totalStockValueAtSale);
            if (currentStockValueCostEl) currentStockValueCostEl.textContent = formatCurrency(currentStockValueAtCost);
            if (currentStockValueSaleEl) currentStockValueSaleEl.textContent = formatCurrency(currentStockValueAtSale);
            if (potentialProfitEl) potentialProfitEl.textContent = formatCurrency(potentialStockProfit);
            
            renderSalesHistory(salesHistory);
            renderExpensesLog({marketing: marketingExpenses, tools: toolsExpenses, other: otherExpenses});
            renderCostAdjustmentsLog(costAdjustments);
        }
        
        function renderSalesHistory(salesHistory) {
            if (!salesHistoryListEl) return;
            salesHistoryListEl.innerHTML = '';
            if (Array.isArray(salesHistory) && salesHistory.length > 0) {
                salesHistory.slice().reverse().forEach(sale => {
                    if (sale && sale.date) {
                        const saleEl = document.createElement('div');
                        saleEl.className = 'flex justify-between items-center bg-slate-50 p-2 rounded-md text-sm';
                        const saleDate = sale.date.toDate ? sale.date.toDate() : new Date(sale.date);
                        saleEl.innerHTML = `<span>بيع ${sale.quantity} @ ${formatCurrency(sale.salePrice)}</span><span class="text-xs text-slate-500">${saleDate.toLocaleString('ar-SA')}</span>`;
                        salesHistoryListEl.appendChild(saleEl);
                    }
                });
            } else {
                salesHistoryListEl.innerHTML = '<p class="text-slate-500 text-center">لا توجد عمليات بيع مسجلة.</p>';
            }
        }

        function renderExpensesLog(expenses) {
            if (!expensesLogEl) return;
            expensesLogEl.innerHTML = '';
            const allExpenses = [
                ...(Array.isArray(expenses.marketing) ? expenses.marketing.map(e => ({...e, type: 'marketing', typeName: 'تسويق'})) : []),
                ...(Array.isArray(expenses.tools) ? expenses.tools.map(e => ({...e, type: 'tools', typeName: 'أدوات'})) : []),
                ...(Array.isArray(expenses.other) ? expenses.other.map(e => ({...e, type: 'other', typeName: 'أخرى'})) : [])
            ].sort((a, b) => (b.date.toDate ? b.date.toDate() : new Date(b.date)) - (a.date.toDate ? a.date.toDate() : new Date(a.date)));

            if (allExpenses.length > 0) {
                allExpenses.forEach(exp => {
                    const expEl = document.createElement('div');
                    expEl.className = 'flex justify-between items-center bg-slate-50 p-2 rounded-md text-sm';
                    const expDate = exp.date.toDate ? exp.date.toDate() : new Date(exp.date);
                    expEl.innerHTML = `<div><p class="font-bold">${formatCurrency(exp.amount)} - <span class="font-normal">${exp.typeName}</span></p><p class="text-xs text-slate-500">${exp.note || 'لا توجد ملاحظة'}</p></div><div class="flex items-center gap-2"><span class="text-xs text-slate-500">${expDate.toLocaleDateString('ar-SA')}</span><button data-type="${exp.type}" data-id="${exp.date.toMillis()}" class="delete-expense-btn bg-red-100 text-red-600 p-1 rounded hover:bg-red-200"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path></svg></button></div>`;
                    expensesLogEl.appendChild(expEl);
                });
            } else {
                expensesLogEl.innerHTML = '<p class="text-slate-500 text-center">لا توجد مصاريف مسجلة.</p>';
            }
        }
        
        function renderCostAdjustmentsLog(adjustments) {
            if (!costAdjustmentsLogEl) return;
            costAdjustmentsLogEl.innerHTML = '';
            if (Array.isArray(adjustments) && adjustments.length > 0) {
                 adjustments.slice().reverse().forEach(adj => {
                    const adjEl = document.createElement('div');
                    adjEl.className = 'flex justify-between items-center bg-slate-50 p-2 rounded-md text-sm';
                    adjEl.innerHTML = `<span>تكلفة ${formatCurrency(adj.cost)} لـ ${adj.quantity} قطعة (متبقي: ${adj.remaining})</span><button data-id="${adj.id}" class="delete-adjustment-btn bg-red-100 text-red-600 p-1 rounded hover:bg-red-200"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path></svg></button>`;
                    costAdjustmentsLogEl.appendChild(adjEl);
                 });
            } else {
                 costAdjustmentsLogEl.innerHTML = '<p class="text-slate-500 text-center">لا توجد تكاليف إضافية.</p>';
            }
        }

        // --- Event Handlers ---
        salesPanelBtn.addEventListener('click', () => {
            salesPanel.classList.remove('hidden');
            adminPanel.classList.add('hidden');
            salesPanelBtn.classList.add('active');
            adminPanelBtn.classList.remove('active');
        });
        adminPanelBtn.addEventListener('click', () => {
            salesPanel.classList.add('hidden');
            adminPanel.classList.remove('hidden');
            salesPanelBtn.classList.remove('active');
            adminPanelBtn.classList.add('active');
        });

        // Auth
        showSignup.addEventListener('click', (e) => { e.preventDefault(); loginForm.classList.add('hidden'); signupForm.classList.remove('hidden'); });
        showLogin.addEventListener('click', (e) => { e.preventDefault(); signupForm.classList.add('hidden'); loginForm.classList.remove('hidden'); });
        document.getElementById('signup-btn').addEventListener('click', () => {
            const email = document.getElementById('signup-email').value;
            const password = document.getElementById('signup-password').value;
            createUserWithEmailAndPassword(auth, email, password).catch(error => showToast("خطأ: " + error.message, true));
        });
        document.getElementById('login-btn').addEventListener('click', () => {
            const email = document.getElementById('login-email').value;
            const password = document.getElementById('login-password').value;
            signInWithEmailAndPassword(auth, email, password).catch(error => showToast("خطأ: البريد الإلكتروني أو كلمة المرور غير صحيحة.", true));
        });
        logoutBtn.addEventListener('click', () => signOut(auth));

        function debounce(func, delay) {
            let timeout;
            return function(...args) { clearTimeout(timeout); timeout = setTimeout(() => func.apply(this, args), 700); };
        }
        async function updateField(fieldName, value) {
            if (dataRef) {
                try { await updateDoc(dataRef, { [fieldName]: value }); }
                catch (error) { console.error("Update Error:", error); showToast("خطأ في حفظ البيانات.", true); }
            }
        }
        const debouncedUpdate = debounce(updateField, 700);
        ['adminCostPrice', 'adminSellPrice', 'adminDiscountPercentage'].forEach(id => {
            if(elements[id]) elements[id].addEventListener('input', () => {
                const fieldName = id.replace('admin', '').charAt(0).toLowerCase() + id.replace('admin', '').slice(1);
                debouncedUpdate(fieldName, parseFloat(elements[id].value) || 0)
            });
        });

        // Stock, Expenses, and Adjustments
        document.getElementById('addStockBtn')?.addEventListener('click', () => adjustStock(true));
        document.getElementById('removeStockBtn')?.addEventListener('click', () => adjustStock(false));
        async function adjustStock(isAdding) {
            const adjustmentValue = parseInt(elements.stockAdjustment.value);
            if (!adjustmentValue || adjustmentValue <= 0) { showToast("الرجاء إدخال كمية صحيحة للتعديل.", true); return; }
            const currentStock = localData.availableStock || 0;
            let newStock = isAdding ? currentStock + adjustmentValue : currentStock - adjustmentValue;
            if (newStock < 0) { showToast("لا يمكن أن يكون المخزون سالباً.", true); return; }
            await updateField('availableStock', newStock);
            elements.stockAdjustment.value = '';
            showToast("تم تحديث المخزون بنجاح!");
        }
        
        document.getElementById('addMarketingExpenseBtn')?.addEventListener('click', () => addExpense('marketing'));
        document.getElementById('addToolsExpenseBtn')?.addEventListener('click', () => addExpense('tools'));
        document.getElementById('addOtherExpenseBtn')?.addEventListener('click', () => addExpense('other'));
        async function addExpense(type) {
            const amountEl = elements[`new${type.charAt(0).toUpperCase() + type.slice(1)}Expense`];
            const noteEl = elements[`new${type.charAt(0).toUpperCase() + type.slice(1)}ExpenseNote`];
            const amount = parseFloat(amountEl.value);
            if (!amount || amount <= 0) { showToast("الرجاء إدخال مبلغ صحيح.", true); return; }
            const newExpense = { amount, note: noteEl.value || '', date: new Date() };
            await updateDoc(dataRef, { [`${type}Expenses`]: arrayUnion(newExpense) });
            amountEl.value = '';
            noteEl.value = '';
            showToast(`تمت إضافة المصروف بنجاح.`);
        }

        expensesLogEl?.addEventListener('click', async (e) => {
            const button = e.target.closest('.delete-expense-btn');
            if (button) {
                const type = button.dataset.type;
                const id = parseInt(button.dataset.id);
                const expenseToDelete = localData[`${type}Expenses`].find(exp => exp.date.toMillis() === id);
                if (expenseToDelete) {
                    await updateDoc(dataRef, { [`${type}Expenses`]: arrayRemove(expenseToDelete) });
                    showToast("تم حذف المصروف.");
                }
            }
        });

        document.getElementById('addTempCostBtn')?.addEventListener('click', async () => {
            const cost = parseFloat(elements.additionalCost.value);
            const qty = parseInt(elements.additionalCostQty.value);
            if (!cost || cost <= 0 || !qty || qty <= 0) { showToast("الرجاء إدخال تكلفة وكمية صحيحتين.", true); return; }
            const newAdjustment = { id: Date.now(), cost, quantity: qty, remaining: qty };
            await updateDoc(dataRef, { costAdjustments: arrayUnion(newAdjustment) });
            elements.additionalCost.value = '';
            elements.additionalCostQty.value = '';
            showToast("تمت إضافة التكلفة المؤقتة.");
        });

        costAdjustmentsLogEl?.addEventListener('click', async (e) => {
            const button = e.target.closest('.delete-adjustment-btn');
            if (button) {
                const id = parseInt(button.dataset.id);
                const adjustmentToDelete = localData.costAdjustments.find(adj => adj.id === id);
                if (adjustmentToDelete) {
                    await updateDoc(dataRef, { costAdjustments: arrayRemove(adjustmentToDelete) });
                    showToast("تم حذف التكلفة المؤقتة.");
                }
            }
        });

        // Sales
        async function recordSale(quantity, salePrice) {
            if (!quantity || quantity <= 0) { showToast("الرجاء إدخال كمية صحيحة.", true); return false; }
            if (salePrice === undefined || salePrice < 0) { showToast("الرجاء إدخال سعر بيع صحيح.", true); return false; }
            if (quantity > localData.availableStock) { showToast("الكمية المباعة أكبر من المخزون المتوفر!", true); return false; }
            
            let itemsToProcess = quantity;
            let totalCostForThisSale = 0;
            const updatedAdjustments = JSON.parse(JSON.stringify(localData.costAdjustments || []));
            updatedAdjustments.sort((a,b) => a.id - b.id);

            for (const adj of updatedAdjustments) {
                if (itemsToProcess === 0) break;
                if (adj.remaining > 0) {
                    const processQty = Math.min(itemsToProcess, adj.remaining);
                    totalCostForThisSale += (localData.costPrice + adj.cost) * processQty;
                    adj.remaining -= processQty;
                    itemsToProcess -= processQty;
                }
            }
            if (itemsToProcess > 0) {
                totalCostForThisSale += localData.costPrice * itemsToProcess;
            }
            
            const costPriceAtTimeOfSale = totalCostForThisSale / quantity;
            const newSale = { quantity, salePrice, costPriceAtTimeOfSale, date: new Date() };
            const newStock = localData.availableStock - quantity;
            
            try {
                await updateDoc(dataRef, { availableStock: newStock, salesHistory: arrayUnion(newSale), costAdjustments: updatedAdjustments });
                showToast("تم تسجيل البيع بنجاح!");
                return true;
            } catch (error) {
                console.error("Sale Error:", error);
                showToast("حدث خطأ أثناء تسجيل البيع.", true);
                return false;
            }
        }

        document.getElementById('recordSaleBtn')?.addEventListener('click', async () => {
            const quantity = parseInt(elements.newSaleQty.value);
            const finalSellPrice = (localData.sellPrice || 0) * (1 - (localData.discountPercentage || 0) / 100);
            const success = await recordSale(quantity, finalSellPrice);
            if (success) elements.newSaleQty.value = '';
        });

        document.getElementById('recordSpecialSaleBtn')?.addEventListener('click', async () => {
            const quantity = parseInt(elements.specialSaleQty.value);
            const price = parseFloat(elements.specialSalePrice.value);
            const success = await recordSale(quantity, price);
            if (success) {
                elements.specialSaleQty.value = '';
                elements.specialSalePrice.value = '';
            }
        });
        
        function showToast(message, isError = false) {
            toastEl.textContent = message;
            toastEl.style.backgroundColor = isError ? '#ef4444' : '#22c55e';
            toastEl.classList.add('show');
            setTimeout(() => toastEl.classList.remove('show'), 3000);
        }

        // --- Start the application ---
        initializeFirebase();
    </script>
</body>
</html>
